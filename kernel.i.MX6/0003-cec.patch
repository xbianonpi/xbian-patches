diff --git a/drivers/mxc/hdmi-cec/mxc_hdmi-cec.c b/drivers/mxc/hdmi-cec/mxc_hdmi-cec.c
index d0113ee..0d5b472 100644
--- a/drivers/mxc/hdmi-cec/mxc_hdmi-cec.c
+++ b/drivers/mxc/hdmi-cec/mxc_hdmi-cec.c
@@ -46,21 +46,12 @@
 
 #include "mxc_hdmi-cec.h"
 
-
-#define MAX_MESSAGE_LEN		17
-
-#define MESSAGE_TYPE_RECEIVE_SUCCESS		1
-#define MESSAGE_TYPE_NOACK		2
-#define MESSAGE_TYPE_DISCONNECTED		3
-#define MESSAGE_TYPE_CONNECTED		4
-#define MESSAGE_TYPE_SEND_SUCCESS		5
-
-
 struct hdmi_cec_priv {
 	int  receive_error;
 	int  send_error;
 	u8 Logical_address;
 	bool cec_state;
+	bool write_busy;
 	u8 last_msg[MAX_MESSAGE_LEN];
 	u8 msg_len;
 	u8 latest_cec_stat;
@@ -83,12 +74,15 @@ static struct class *hdmi_cec_class;
 static struct hdmi_cec_priv hdmi_cec_data;
 static u8 open_count;
 
+static bool hdmi_cable;
+
 static wait_queue_head_t hdmi_cec_queue;
 static irqreturn_t mxc_hdmi_cec_isr(int irq, void *data)
 {
 	struct hdmi_cec_priv *hdmi_cec = data;
 	u8 cec_stat = 0;
 	unsigned long flags;
+	irqreturn_t ret = IRQ_HANDLED;
 
 	spin_lock_irqsave(&hdmi_cec->irq_lock, flags);
 
@@ -100,41 +94,51 @@ static irqreturn_t mxc_hdmi_cec_isr(int irq, void *data)
 	if ((cec_stat & (HDMI_IH_CEC_STAT0_ERROR_INIT | \
 		HDMI_IH_CEC_STAT0_NACK | HDMI_IH_CEC_STAT0_EOM | \
 		HDMI_IH_CEC_STAT0_DONE)) == 0) {
-		spin_unlock_irqrestore(&hdmi_cec->irq_lock, flags);
-		return IRQ_HANDLED;
-	}
 
-	pr_debug("HDMI CEC interrupt received\n");
-	hdmi_cec->latest_cec_stat = cec_stat;
+		hdmi_cec->latest_cec_stat = 0;
+		ret = IRQ_NONE;
+	} else {
+		pr_debug("HDMI CEC interrupt received\n");
+		hdmi_cec->latest_cec_stat = cec_stat;
+	}
 
 	schedule_delayed_work(&(hdmi_cec->hdmi_cec_work), msecs_to_jiffies(20));
-
 	spin_unlock_irqrestore(&hdmi_cec->irq_lock, flags);
 
-	return IRQ_HANDLED;
+	return ret;
 }
 
 void mxc_hdmi_cec_handle(u16 cec_stat)
 {
-	u8 val = 0, i = 0;
+	u8 i = 0;
 	struct hdmi_cec_event *event = NULL;
 
-	/* The current transmission is successful (for initiator only). */
+	pr_debug("function: %s \n", __func__);
 	if (!open_count)
 		return;
 
-	if (cec_stat & HDMI_IH_CEC_STAT0_DONE) {
+	/* The current transmission is successful (for initiator only). */
+	/* A frame is not acknowledged in a directly addressed message.
+	 * Or a frame is negatively acknowledged in
+	 * a broadcast message (for initiator only).
+	 */
+	if (cec_stat & (HDMI_IH_CEC_STAT0_DONE | HDMI_IH_CEC_STAT0_NACK)) {
 
 		event = vmalloc(sizeof(struct hdmi_cec_event));
 		if (NULL == event) {
 			pr_err("%s: Not enough memory!\n", __func__);
 			return;
 		}
-
 		memset(event, 0, sizeof(struct hdmi_cec_event));
-		event->event_type = MESSAGE_TYPE_SEND_SUCCESS;
 
 		mutex_lock(&hdmi_cec_data.lock);
+		event->msg_len = min((int)hdmi_cec_data.msg_len, 2);
+		for (i = 0; i < event->msg_len; i++)
+			event->msg[i] = hdmi_cec_data.last_msg[i];
+
+		event->event_type = (cec_stat & HDMI_IH_CEC_STAT0_DONE) ? 
+			MESSAGE_TYPE_SEND_SUCCESS : MESSAGE_TYPE_NOACK;
+
 		list_add_tail(&event->list, &head);
 		mutex_unlock(&hdmi_cec_data.lock);
 
@@ -166,56 +170,14 @@ void mxc_hdmi_cec_handle(u16 cec_stat)
 			event->msg[i] = hdmi_readb(HDMI_CEC_RX_DATA0+i);
 		hdmi_writeb(0x0, HDMI_CEC_LOCK);
 
-		mutex_lock(&hdmi_cec_data.lock);
 		list_add_tail(&event->list, &head);
-		mutex_unlock(&hdmi_cec_data.lock);
 
 		wake_up(&hdmi_cec_queue);
 	}
 
 	/* An error is detected on cec line (for initiator only). */
 	if (cec_stat & HDMI_IH_CEC_STAT0_ERROR_INIT) {
-
-		mutex_lock(&hdmi_cec_data.lock);
 		hdmi_cec_data.send_error++;
-		if (hdmi_cec_data.send_error > 5) {
-			pr_err("%s:Re-transmission is attempted more than 5 times!\n",
-					__func__);
-			hdmi_cec_data.send_error = 0;
-			mutex_unlock(&hdmi_cec_data.lock);
-			return;
-		}
-
-		for (i = 0; i < hdmi_cec_data.msg_len; i++) {
-			hdmi_writeb(hdmi_cec_data.last_msg[i],
-						HDMI_CEC_TX_DATA0 + i);
-		}
-		hdmi_writeb(hdmi_cec_data.msg_len, HDMI_CEC_TX_CNT);
-
-		val = hdmi_readb(HDMI_CEC_CTRL);
-		val |= 0x01;
-		hdmi_writeb(val, HDMI_CEC_CTRL);
-		mutex_unlock(&hdmi_cec_data.lock);
-	}
-
-	/* A frame is not acknowledged in a directly addressed message.
-	 * Or a frame is negatively acknowledged in
-	 * a broadcast message (for initiator only).
-	 */
-	if (cec_stat & HDMI_IH_CEC_STAT0_NACK) {
-		event = vmalloc(sizeof(struct hdmi_cec_event));
-		if (NULL == event) {
-			pr_err("%s: Not enough memory\n", __func__);
-			return;
-		}
-		memset(event, 0, sizeof(struct hdmi_cec_event));
-		event->event_type = MESSAGE_TYPE_NOACK;
-
-		mutex_lock(&hdmi_cec_data.lock);
-		list_add_tail(&event->list, &head);
-		mutex_unlock(&hdmi_cec_data.lock);
-
-		wake_up(&hdmi_cec_queue);
 	}
 
 	/* An error is notified by a follower.
@@ -226,35 +188,19 @@ void mxc_hdmi_cec_handle(u16 cec_stat)
 	}
 
 	/* HDMI cable connected */
-	if (cec_stat & 0x80) {
-		event = vmalloc(sizeof(struct hdmi_cec_event));
-		if (NULL == event) {
-			pr_err("%s: Not enough memory\n", __func__);
-			return;
-		}
-		memset(event, 0, sizeof(struct hdmi_cec_event));
-		event->event_type = MESSAGE_TYPE_CONNECTED;
-
-		mutex_lock(&hdmi_cec_data.lock);
-		list_add_tail(&event->list, &head);
-		mutex_unlock(&hdmi_cec_data.lock);
-
-		wake_up(&hdmi_cec_queue);
-	}
-
 	/* HDMI cable disconnected */
-	if (cec_stat & 0x100) {
+	if (cec_stat & (0x80 | 0x100)) {
 		event = vmalloc(sizeof(struct hdmi_cec_event));
 		if (NULL == event) {
 			pr_err("%s: Not enough memory!\n", __func__);
 			return;
 		}
 		memset(event, 0, sizeof(struct hdmi_cec_event));
-		event->event_type = MESSAGE_TYPE_DISCONNECTED;
+		event->event_type = (cec_stat & 0x80) ? 
+			MESSAGE_TYPE_CONNECTED : MESSAGE_TYPE_DISCONNECTED;
 
-		mutex_lock(&hdmi_cec_data.lock);
+		hdmi_cable = (cec_stat & 0x80) ? true : false;
 		list_add_tail(&event->list, &head);
-		mutex_unlock(&hdmi_cec_data.lock);
 
 		wake_up(&hdmi_cec_queue);
 	}
@@ -267,7 +213,9 @@ static void mxc_hdmi_cec_worker(struct work_struct *work)
 {
 	u8 val;
 
-	mxc_hdmi_cec_handle(hdmi_cec_data.latest_cec_stat);
+	if (hdmi_cec_data.latest_cec_stat)
+		mxc_hdmi_cec_handle(hdmi_cec_data.latest_cec_stat);
+
 	val = HDMI_IH_CEC_STAT0_WAKEUP | HDMI_IH_CEC_STAT0_ERROR_FOLL |
 			HDMI_IH_CEC_STAT0_ARB_LOST;
 	hdmi_writeb(val, HDMI_IH_MUTE_CEC_STAT0);
@@ -298,96 +246,97 @@ static int hdmi_cec_open(struct inode *inode, struct file *filp)
 static ssize_t hdmi_cec_read(struct file *file, char __user *buf, size_t count,
 			    loff_t *ppos)
 {
-	struct hdmi_cec_event *event = NULL;
+	struct hdmi_cec_priv *hdmi_cec = file->private_data;
+	int ret = 0;
 
 	pr_debug("function : %s\n", __func__);
 	if (!open_count)
 		return -ENODEV;
 
-	mutex_lock(&hdmi_cec_data.lock);
-	if (false == hdmi_cec_data.cec_state) {
-		mutex_unlock(&hdmi_cec_data.lock);
-		return -EACCES;
-	}
-	mutex_unlock(&hdmi_cec_data.lock);
+	count = min(count, sizeof(struct hdmi_cec_event) - sizeof(struct list_head));
 
-	/* delete from list */
-	mutex_lock(&hdmi_cec_data.lock);
-	if (list_empty(&head)) {
-		mutex_unlock(&hdmi_cec_data.lock);
-		return -EACCES;
-	}
-	event = list_first_entry(&head, struct hdmi_cec_event, list);
-	list_del(&event->list);
-	mutex_unlock(&hdmi_cec_data.lock);
+	do {
+		unsigned long flags;    
+		struct hdmi_cec_event *event = NULL;
 
-	if (copy_to_user(buf, event,
-			sizeof(struct hdmi_cec_event) - sizeof(struct list_head))) {
-		vfree(event);
-		return -EFAULT;
-	}
-	vfree(event);
+		spin_lock_irqsave(&hdmi_cec->irq_lock, flags);
+		if (!list_empty(&head)) {
+			event = list_first_entry(&head, struct hdmi_cec_event, list);
+			list_del(&event->list);
+		}
+		spin_unlock_irqrestore(&hdmi_cec->irq_lock, flags);
+
+		if (event) {
+			ret = copy_to_user(buf, event, count) ? -EFAULT : count;
+			vfree(event);
+		}
+		else if (file->f_flags & O_NONBLOCK) {
+			ret = -EAGAIN;
+		}
+		else if (wait_event_interruptible(hdmi_cec_queue, (!list_empty(&head)))) {
+			ret = -ERESTARTSYS;
+		}
+	} while(!ret);
 
-	return sizeof(struct hdmi_cec_event);
+	return ret;
 }
 
 static ssize_t hdmi_cec_write(struct file *file, const char __user *buf,
 			     size_t count, loff_t *ppos)
 {
+	struct hdmi_cec_priv *hdmi_cec = file->private_data;
 	int ret = 0 , i = 0;
 	u8 msg[MAX_MESSAGE_LEN];
-	u8 msg_len = 0, val = 0;
+	u8 val = 0;
 
 	pr_debug("function : %s\n", __func__);
 	if (!open_count)
 		return -ENODEV;
 
-	mutex_lock(&hdmi_cec_data.lock);
-	if (false == hdmi_cec_data.cec_state) {
-		mutex_unlock(&hdmi_cec_data.lock);
-		return -EACCES;
-	}
-	mutex_unlock(&hdmi_cec_data.lock);
-
 	if (count > MAX_MESSAGE_LEN)
-		return -EINVAL;
+		return -E2BIG;
 
-	mutex_lock(&hdmi_cec_data.lock);
-	hdmi_cec_data.send_error = 0;
 	memset(&msg, 0, MAX_MESSAGE_LEN);
-	ret = copy_from_user(&msg, buf, count);
-	if (ret) {
-		ret = -EACCES;
-		goto end;
-	}
-
-	msg_len = count;
-	hdmi_writeb(msg_len, HDMI_CEC_TX_CNT);
-	for (i = 0; i < msg_len; i++) {
-		hdmi_writeb(msg[i], HDMI_CEC_TX_DATA0+i);
-	}
+	if (copy_from_user(&msg, buf, count))
+		return -EFAULT;
 
-	val = hdmi_readb(HDMI_CEC_CTRL);
-	val |= 0x01;
-	hdmi_writeb(val, HDMI_CEC_CTRL);
-	memcpy(hdmi_cec_data.last_msg, msg, msg_len);
-	hdmi_cec_data.msg_len = msg_len;
-
-	i = 0;
-	val = hdmi_readb(HDMI_CEC_CTRL);
-	while ((val & 0x01) == 0x1) {
-		msleep(50);
-		i++;
-		if (i > 3) {
-			ret = -EIO;
-			goto end;
+	do {
+		if (file->f_flags & O_NONBLOCK) {
+			if (hdmi_cec->write_busy)
+				ret = -EAGAIN;
+		} else if (wait_event_interruptible(hdmi_cec_queue, (!hdmi_cec->write_busy))) {
+				ret = -ERESTARTSYS;
+		}
+		if (ret)
+			break;
+		
+		mutex_lock(&hdmi_cec->lock);
+		hdmi_cec->write_busy = true;
+
+		hdmi_cec->send_error = 0;
+		hdmi_writeb(count, HDMI_CEC_TX_CNT);
+		for (i = 0; i < count; i++) {
+			hdmi_writeb(msg[i], HDMI_CEC_TX_DATA0+i);
 		}
+
 		val = hdmi_readb(HDMI_CEC_CTRL);
-	}
+		val |= 0x01;
+		hdmi_writeb(val, HDMI_CEC_CTRL);
+		memcpy(hdmi_cec->last_msg, msg, count);
+		hdmi_cec->msg_len = count;
 
-end:
-	mutex_unlock(&hdmi_cec_data.lock);
+		for (i = 0; i++ < 60 && (hdmi_readb(HDMI_CEC_CTRL) & 0x01) && !hdmi_cec->send_error; msleep(50));
+		if (hdmi_readb(HDMI_CEC_CTRL) & 0x01 || hdmi_cec->send_error) {
+			hdmi_cec->msg_len = 0;
+			hdmi_cec->send_error = 0;
+			ret = -EIO;
+		} else {
+			ret = count;
+		}
+	} while(!ret);
 
+	hdmi_cec->write_busy = false;
+	mutex_unlock(&hdmi_cec->lock);
 	return ret;
 }
 
@@ -399,8 +348,8 @@ end:
 static long hdmi_cec_ioctl(struct file *filp, u_int cmd,
 		     u_long arg)
 {
-	int ret = 0, status = 0;
-	u8 val = 0, msg = 0;
+	int ret = 0;
+	u8 val = 0;
 	struct mxc_edid_cfg hdmi_edid_cfg;
 
 	pr_debug("function : %s\n", __func__);
@@ -421,8 +370,7 @@ static long hdmi_cec_ioctl(struct file *filp, u_int cmd,
 			val = 1 << hdmi_cec_data.Logical_address;
 			hdmi_writeb(val, HDMI_CEC_ADDR_L);
 			hdmi_writeb(0, HDMI_CEC_ADDR_H);
-		} else if (hdmi_cec_data.Logical_address > 7 &&
-					hdmi_cec_data.Logical_address <= 15) {
+		} else if (hdmi_cec_data.Logical_address <= 15) {
 			val = 1 << (hdmi_cec_data.Logical_address - 8);
 			hdmi_writeb(val, HDMI_CEC_ADDR_H);
 			hdmi_writeb(0, HDMI_CEC_ADDR_L);
@@ -430,20 +378,6 @@ static long hdmi_cec_ioctl(struct file *filp, u_int cmd,
 			ret = -EINVAL;
 		}
 
-		/* Send Polling message with same source
-		 * and destination address
-		 */
-		if (0 == ret && 15 != hdmi_cec_data.Logical_address) {
-			msg = (hdmi_cec_data.Logical_address << 4) |
-					hdmi_cec_data.Logical_address;
-			hdmi_writeb(1, HDMI_CEC_TX_CNT);
-			hdmi_writeb(msg, HDMI_CEC_TX_DATA0);
-
-			val = hdmi_readb(HDMI_CEC_CTRL);
-			val |= 0x01;
-			hdmi_writeb(val, HDMI_CEC_CTRL);
-		}
-
 		mutex_unlock(&hdmi_cec_data.lock);
 		break;
 
@@ -452,8 +386,6 @@ static long hdmi_cec_ioctl(struct file *filp, u_int cmd,
 		val &= ~HDMI_MC_CLKDIS_CECCLK_DISABLE;
 		hdmi_writeb(val, HDMI_MC_CLKDIS);
 
-		hdmi_writeb(0x02, HDMI_CEC_CTRL);
-
 		val = HDMI_IH_CEC_STAT0_ERROR_INIT | HDMI_IH_CEC_STAT0_NACK |
 			HDMI_IH_CEC_STAT0_EOM | HDMI_IH_CEC_STAT0_DONE;
 		hdmi_writeb(val, HDMI_CEC_POLARITY);
@@ -463,6 +395,8 @@ static long hdmi_cec_ioctl(struct file *filp, u_int cmd,
 		hdmi_writeb(val, HDMI_CEC_MASK);
 		hdmi_writeb(val, HDMI_IH_MUTE_CEC_STAT0);
 
+		hdmi_writeb(0x02, HDMI_CEC_CTRL);
+
 		mutex_lock(&hdmi_cec_data.lock);
 		hdmi_cec_data.cec_state = true;
 		mutex_unlock(&hdmi_cec_data.lock);
@@ -491,11 +425,9 @@ static long hdmi_cec_ioctl(struct file *filp, u_int cmd,
 
 	case HDMICEC_IOC_GETPHYADDRESS:
 		hdmi_get_edid_cfg(&hdmi_edid_cfg);
-		status = copy_to_user((void __user *)arg,
+		ret = copy_to_user((void __user *)arg,
 					 &hdmi_edid_cfg.physical_address,
-					 4*sizeof(u8));
-		if (status)
-			ret = -EFAULT;
+					 4*sizeof(u8))?-EFAULT:0;
 		break;
 
 	default:
@@ -512,16 +444,30 @@ static long hdmi_cec_ioctl(struct file *filp, u_int cmd,
 */
 static int hdmi_cec_release(struct inode *inode, struct file *filp)
 {
-	mutex_lock(&hdmi_cec_data.lock);
+	struct hdmi_cec_priv *hdmi_cec = filp->private_data;
+
+	pr_debug("function : %s\n", __func__);
+
+	if (hdmi_cec->cec_state)
+		hdmi_cec_ioctl(filp, HDMICEC_IOC_STOPDEVICE, 0);
 
+	mutex_lock(&hdmi_cec->lock);
 	if (open_count) {
-		open_count = 0;
-		hdmi_cec_data.cec_state = false;
 		hdmi_cec_data.Logical_address = 15;
-	}
 
-	mutex_unlock(&hdmi_cec_data.lock);
+		if (!(wait_event_timeout(hdmi_cec_queue, !hdmi_cec->write_busy, msecs_to_jiffies(500))))
+			hdmi_cec->write_busy = false;
 
+		while (!list_empty(&head)) {
+			struct hdmi_cec_event *event;
+
+			event = list_first_entry(&head, struct hdmi_cec_event, list);
+			list_del(&event->list);
+			vfree(event);
+		}
+		open_count = 0;
+	}
+	mutex_unlock(&hdmi_cec->lock);
 	return 0;
 }
 
@@ -531,14 +477,10 @@ static unsigned int hdmi_cec_poll(struct file *file, poll_table *wait)
 
 	pr_debug("function : %s\n", __func__);
 
-	if (!open_count)
-		return -ENODEV;
-
-	if (false == hdmi_cec_data.cec_state)
-		return -EACCES;
-
 	poll_wait(file, &hdmi_cec_queue, wait);
 
+	if (!hdmi_cec_data.write_busy && hdmi_cable)
+		mask = (POLLOUT | POLLWRNORM);
 	if (!list_empty(&head))
 		mask |= (POLLIN | POLLRDNORM);
 
@@ -617,6 +559,8 @@ static int hdmi_cec_dev_probe(struct platform_device *pdev)
 
 	INIT_DELAYED_WORK(&hdmi_cec_data.hdmi_cec_work, mxc_hdmi_cec_worker);
 
+	hdmi_cable = true;
+
 	dev_info(&pdev->dev, "HDMI CEC initialized\n");
 	goto out;
 
@@ -631,6 +575,9 @@ out:
 
 static int hdmi_cec_dev_remove(struct platform_device *pdev)
 {
+	if (open_count)
+		hdmi_cec_release(0, 0);
+
 	if (hdmi_cec_major > 0) {
 		device_destroy(hdmi_cec_class, MKDEV(hdmi_cec_major, 0));
 		class_destroy(hdmi_cec_class);
diff --git a/drivers/mxc/hdmi-cec/mxc_hdmi-cec.h b/drivers/mxc/hdmi-cec/mxc_hdmi-cec.h
index 4437057..297f628 100644
--- a/drivers/mxc/hdmi-cec/mxc_hdmi-cec.h
+++ b/drivers/mxc/hdmi-cec/mxc_hdmi-cec.h
@@ -35,4 +35,13 @@
 #define HDMICEC_IOC_GETPHYADDRESS	\
 				_IOR(HDMICEC_IOC_MAGIC, 4, unsigned char[4])
 
+#define MAX_MESSAGE_LEN                         16
+
+#define MESSAGE_TYPE_RECEIVE_SUCCESS            1
+#define MESSAGE_TYPE_NOACK                      2
+#define MESSAGE_TYPE_DISCONNECTED               3
+#define MESSAGE_TYPE_CONNECTED                  4
+#define MESSAGE_TYPE_SEND_SUCCESS               5
+
 #endif				/* !_HDMICEC_H_ */
+
diff --git a/drivers/video/mxc/mxc_hdmi.c b/drivers/video/mxc/mxc_hdmi.c
index 160db29..c5fc93f 100644
--- a/drivers/video/mxc/mxc_hdmi.c
+++ b/drivers/video/mxc/mxc_hdmi.c
@@ -1704,8 +1704,12 @@ static void mxc_hdmi_enable_video_path(struct mxc_hdmi *hdmi)
 	hdmi_writeb(0x16, HDMI_FC_CH1PREAM);
 	hdmi_writeb(0x21, HDMI_FC_CH2PREAM);
 
+	/* Save CEC clock */
+	clkdis = hdmi_readb(HDMI_MC_CLKDIS) & HDMI_MC_CLKDIS_CECCLK_DISABLE;
+	clkdis |= ~HDMI_MC_CLKDIS_CECCLK_DISABLE;
+
 	/* Enable pixel clock and tmds data path */
-	clkdis = 0x7F;
+	clkdis = 0x7F & clkdis;
 	clkdis &= ~HDMI_MC_CLKDIS_PIXELCLK_DISABLE;
 	hdmi_writeb(clkdis, HDMI_MC_CLKDIS);
 
@@ -1985,10 +1989,16 @@ static void mxc_hdmi_power_off(struct mxc_dispdrv_handle *disp)
 
 static void mxc_hdmi_cable_disconnected(struct mxc_hdmi *hdmi)
 {
+        u8 clkdis;
+
 	dev_dbg(&hdmi->pdev->dev, "%s\n", __func__);
 
+	/* Save CEC clock */
+	clkdis = hdmi_readb(HDMI_MC_CLKDIS) & HDMI_MC_CLKDIS_CECCLK_DISABLE;
+	clkdis |= ~HDMI_MC_CLKDIS_CECCLK_DISABLE;
+
 	/* Disable All HDMI clock */
-	hdmi_writeb(0xff, HDMI_MC_CLKDIS);
+	hdmi_writeb(0xff & clkdis, HDMI_MC_CLKDIS);
 
 	mxc_hdmi_phy_disable(hdmi);
 
