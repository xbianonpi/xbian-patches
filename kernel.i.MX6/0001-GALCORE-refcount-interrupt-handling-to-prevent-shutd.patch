From 39d1726edaf9c0fa733a30e8ef02e5acc6b545ef Mon Sep 17 00:00:00 2001
From: Jon Nettleton <jon.nettleton@gmail.com>
Date: Mon, 3 Mar 2014 07:44:03 +0100
Subject: [PATCH] GALCORE: refcount interrupt handling to prevent shutdown
 race

This fixes the following scenario.  First thread comes in with
a command queue, it takes the powersave mutex and then enables
interrupts if they are disabled, submits the command queue and
releases the powersave mutex.  Then the program doing the drawing
exits and releases the driver, which takes the powersave mutex
and issues a powerdown which disables irqs.  This can cause
an interrupts pending softirq crash.  Therefore we refcount all
the calls to enable interrupts and don't disable them until we are
back down to 0.
---
 .../hal/os/linux/kernel/gc_hal_kernel_device.c     |   13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

diff --git a/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_device.c b/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_device.c
index 5917a30..56a9377 100644
--- a/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_device.c
+++ b/drivers/mxc/gpu-viv/hal/os/linux/kernel/gc_hal_kernel_device.c
@@ -350,7 +350,7 @@ gckGALDEVICE_Setup_ISR(
 
     /* Make sure ISR is disabled to start. */
     disable_irq(Device->irqLines[Core]);
-    Device->isrEnabled[Core] = gcvFALSE;
+    Device->isrEnabled[Core] = 0;
 
     /* Mark ISR as initialized. */
     Device->isrInitializeds[Core] = gcvTRUE;
@@ -381,12 +381,13 @@ gckGALDEVICE_Enable_ISR(
     }
 
     spin_lock(&Device->kernels[Core]->irq_lock);
-    if (Device->isrEnabled[Core] == gcvFALSE)
+    if (Device->isrEnabled[Core] == 0)
     {
         enable_irq(Device->irqLines[Core]);
         /* Mark ISR as initialized. */
         Device->isrEnabled[Core] = gcvTRUE;
     }
+    Device->isrEnabled[Core]++;
     spin_unlock(&Device->kernels[Core]->irq_lock);
 
     gcmkFOOTER_NO();
@@ -450,11 +451,11 @@ gckGALDEVICE_Disable_ISR(
 
     /* disable the irq */
     spin_lock(&Device->kernels[Core]->irq_lock);
-    if (Device->isrEnabled[Core])
+    if (Device->isrEnabled[Core] > 0)
     {
-        disable_irq(Device->irqLines[Core]);
-
-        Device->isrEnabled[Core] = gcvFALSE;
+        Device->isrEnabled[Core]--;
+    	if (Device->isrEnabled[Core] == 0)
+            disable_irq(Device->irqLines[Core]);
     }
     spin_unlock(&Device->kernels[Core]->irq_lock);
 
-- 
1.7.9.5

