diff --git a/xbmc/ApplicationMessenger.cpp b/xbmc/ApplicationMessenger.cpp
index 4a626e9..63aab2c 100644
--- a/xbmc/ApplicationMessenger.cpp
+++ b/xbmc/ApplicationMessenger.cpp
@@ -264,6 +264,12 @@ void CApplicationMessenger::ProcessMessage(ThreadMessage *pMsg)
       }
       break;
 
+    case TMSG_QUITWAIT:
+      {
+        g_application.Stop(EXITCODE_QUITWAIT);
+      }
+      break;
+
     case TMSG_HIBERNATE:
       {
         g_PVRManager.SetWakeupCommand();
@@ -1065,6 +1071,12 @@ void CApplicationMessenger::Shutdown()
   SendMessage(tMsg);
 }
 
+void CApplicationMessenger::QuitWait()
+{
+  ThreadMessage tMsg = {TMSG_QUITWAIT};
+  SendMessage(tMsg);
+}
+
 void CApplicationMessenger::Powerdown()
 {
   ThreadMessage tMsg = {TMSG_POWERDOWN};
diff --git a/xbmc/ApplicationMessenger.h b/xbmc/ApplicationMessenger.h
index 0bceaaa..8acb396 100644
--- a/xbmc/ApplicationMessenger.h
+++ b/xbmc/ApplicationMessenger.h
@@ -88,6 +88,7 @@ namespace MUSIC_INFO
 #define TMSG_RENDERER_FLUSH       312
 #define TMSG_INHIBITIDLESHUTDOWN  313
 #define TMSG_LOADPROFILE          314
+#define TMSG_QUITWAIT             350
 
 #define TMSG_NETWORKMESSAGE         500
 
@@ -192,6 +193,7 @@ public:
   void Shutdown();
   void Powerdown();
   void Quit();
+  void QuitWait();
   void Hibernate();
   void Suspend();
   void Restart();
diff --git a/xbmc/XBApplicationEx.h b/xbmc/XBApplicationEx.h
index ff0be99..fe49780 100644
--- a/xbmc/XBApplicationEx.h
+++ b/xbmc/XBApplicationEx.h
@@ -29,6 +29,7 @@ enum {
   EXITCODE_POWERDOWN = 64,
   EXITCODE_RESTARTAPP= 65,
   EXITCODE_REBOOT    = 66,
+  EXITCODE_QUITWAIT  = 50,
 };
 
 class CXBApplicationEx : public IWindowManagerCallback
diff --git a/xbmc/peripherals/devices/PeripheralCecAdapter.cpp b/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
index 056a77e..68ad774 100644
--- a/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
+++ b/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
@@ -651,7 +651,7 @@ int CPeripheralCecAdapter::CecCommand(void *cbParam, const cec_command command)
     case CEC_OPCODE_STANDBY:
       /* a device was put in standby mode */
       if (command.initiator == CECDEVICE_TV &&
-          (adapter->m_configuration.bPowerOffOnStandby == 1 || adapter->m_configuration.bShutdownOnStandby == 1) &&
+          (adapter->m_configuration.bPowerOffOnStandby == 1 || adapter->m_configuration.bShutdownOnStandby == 1 || adapter->m_configuration.bShutdownOnStandby == 2 ) &&
           (!adapter->m_screensaverLastActivated.IsValid() || CDateTime::GetCurrentDateTime() - adapter->m_screensaverLastActivated > CDateTimeSpan(0, 0, 0, SCREENSAVER_TIMEOUT)))
       {
         adapter->m_bStarted = false;
@@ -659,6 +659,8 @@ int CPeripheralCecAdapter::CecCommand(void *cbParam, const cec_command command)
           CApplicationMessenger::Get().Suspend();
         else if (adapter->m_configuration.bShutdownOnStandby == 1)
           CApplicationMessenger::Get().Shutdown();
+        else if (adapter->m_configuration.bShutdownOnStandby == 2)
+          CApplicationMessenger::Get().QuitWait();
       }
       break;
     case CEC_OPCODE_SET_MENU_LANGUAGE:
@@ -1368,6 +1368,7 @@ void CPeripheralCecAdapter::SetConfigurationFromSettings(void)
  int iStandbyAction(GetSettingInt("standby_pc_on_tv_standby"));
  m_configuration.bPowerOffOnStandby = iStandbyAction == 13011 ? 1 : 0;
  m_configuration.bShutdownOnStandby = iStandbyAction == 13005 ? 1 : 0;
+ m_configuration.bPowerOffOnStandby = iStandbyAction == 13009 ? 2 : 0;

  // double tap prevention timeout in ms
  m_configuration.iDoubleTapTimeoutMs = GetSettingInt("double_tap_timeout_ms");
